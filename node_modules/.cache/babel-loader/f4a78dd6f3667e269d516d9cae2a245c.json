{"ast":null,"code":"var _jsxFileName = \"/Users/musubiappleidgmail.com/Desktop/Projects/Quiz-trial/src/Components/Decoded.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst decodeHTML = function (html) {\n  const txt = document.createElement('textarea');\n  txt.innerHTML = html;\n  return txt.value;\n};\n\nconst Decoded = () => {\n  const results = useSelector(state => state.questions);\n  const [questions, setQuestions] = useState([]);\n  const questionIndex = useSelector(state => state.index);\n  const question = questions[questionIndex];\n  const dispatch = useDispatch();\n  const encodedQuestions = useSelector(state => state.questions);\n  const answer = question && question.correct_answer;\n  const [answerSelected, setAnswerSelected] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [options, setOptions] = useState([]);\n  useEffect(() => {\n    const decodedQuestions = encodedQuestions.map(q => {\n      return { ...q,\n        question: decodeHTML(q.question),\n        correct_answer: decodeHTML(q.correct_answer),\n        incorrect_answers: q.incorrect_answers.map(a => decodeHTML(a))\n      };\n    });\n    setQuestions(decodedQuestions);\n  }, [encodedQuestions]);\n\n  const getRandomInt = max => {\n    return Math.floor(Math.random() * Math.floor(max));\n  };\n\n  useEffect(() => {\n    if (!question) {\n      return;\n    }\n\n    let answers = [...question.incorrect_answers];\n    answers.splice(getRandomInt(question.incorrect_answers.length), 0, question.correct_answer);\n    setOptions(answers);\n  }, [question]);\n\n  const handleListItemClick = event => {\n    setAnswerSelected(true);\n    setSelectedAnswer(event.target.textContent); // if (event.target.textContent === answer) {\n    //   dispatch({\n    //     type: 'SET_SCORE',\n    //     score: score + 1,\n    //   })\n    // }\n\n    if (questionIndex + 1 <= questions.length) {\n      setTimeout(() => {\n        setAnswerSelected(false);\n        setSelectedAnswer(null);\n        dispatch({\n          type: 'SET_INDEX',\n          index: questionIndex + 1\n        });\n      }, 250);\n    }\n  }; // console.log(score)\n  //   const getClass = option => {\n  //     if (!answerSelected) {\n  //       return ``;\n  //     }\n  //     if (option === answer) {\n  //       return `correct`\n  //     }\n  //     if (option === selectedAnswer) {\n  //       return `selected`\n  //     }\n  //   }\n  //   if (!question) {\n  //     return <div>Loading</div>\n  //   }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 18\n    }\n  }, results.map((result, i) => /*#__PURE__*/React.createElement(\"li\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 12\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 19\n    }\n  }, \"Question \", questionIndex), \": \", result.question, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, \"  a: \", result.correct_answer, \" \"))))));\n};\n\nexport default Decoded;","map":{"version":3,"sources":["/Users/musubiappleidgmail.com/Desktop/Projects/Quiz-trial/src/Components/Decoded.js"],"names":["React","useState","useEffect","useSelector","useDispatch","decodeHTML","html","txt","document","createElement","innerHTML","value","Decoded","results","state","questions","setQuestions","questionIndex","index","question","dispatch","encodedQuestions","answer","correct_answer","answerSelected","setAnswerSelected","selectedAnswer","setSelectedAnswer","options","setOptions","decodedQuestions","map","q","incorrect_answers","a","getRandomInt","max","Math","floor","random","answers","splice","length","handleListItemClick","event","target","textContent","setTimeout","type","result","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nconst decodeHTML = function (html) {\n    const txt = document.createElement('textarea')\n    txt.innerHTML = html\n    return txt.value\n  }\n\n  const Decoded = () => {\n    \n    const results = useSelector((state) => state.questions) \n    const [questions, setQuestions] = useState([])\n    const questionIndex = useSelector((state) => state.index)\n    const question = questions[questionIndex]\n    const dispatch = useDispatch()\n    const encodedQuestions = useSelector((state) => state.questions)\n    const answer = question && question.correct_answer\n    const [answerSelected, setAnswerSelected] = useState(false)\n    const [selectedAnswer, setSelectedAnswer] = useState(null)\n    const [options, setOptions] = useState([])\n  \n\n    useEffect(() => {\n      const decodedQuestions = encodedQuestions.map(q => {\n        return {\n          ...q,\n          question: decodeHTML(q.question),\n          correct_answer: decodeHTML(q.correct_answer),\n          incorrect_answers: q.incorrect_answers.map(a => decodeHTML(a))\n        }\n      })\n  \n      setQuestions(decodedQuestions)\n    }, [encodedQuestions])\n\n    const getRandomInt = (max) => {\n        return Math.floor(Math.random() * Math.floor(max))\n      }\n    \n      useEffect(() => {\n        if (!question) {\n          return;\n        }\n        let answers = [...question.incorrect_answers]\n        answers.splice(getRandomInt(question.incorrect_answers.length), 0, question.correct_answer)\n    \n        setOptions(answers)\n      }, [question])\n    \n      const handleListItemClick = (event) => {\n        setAnswerSelected(true)\n        setSelectedAnswer(event.target.textContent)\n    \n        // if (event.target.textContent === answer) {\n        //   dispatch({\n        //     type: 'SET_SCORE',\n        //     score: score + 1,\n        //   })\n        // }\n    \n        if (questionIndex + 1 <= questions.length) {\n          setTimeout(() => {\n            setAnswerSelected(false)\n            setSelectedAnswer(null)\n    \n    \n            dispatch({\n              type: 'SET_INDEX',\n              index: questionIndex +1,\n            \n            })\n          }, 250)\n        }\n      }\n    // console.log(score)\n    \n    \n    //   const getClass = option => {\n    //     if (!answerSelected) {\n    //       return ``;\n    //     }\n    \n    //     if (option === answer) {\n    //       return `correct`\n    //     }\n    \n    //     if (option === selectedAnswer) {\n    //       return `selected`\n    //     }\n    //   }\n    \n    //   if (!question) {\n    //     return <div>Loading</div>\n    //   }\n    \n   \n     \n    return (\n        <div>\n            <div><ul>\n        {results.map((result,i)=>(\n          <li key = {i} >\n           <div> {<p>Question {questionIndex}</p>}: {result.question} </div>\n\n          <div>  a: {result.correct_answer} </div>\n          </li>\n\n\n\n        ))}\n      </ul></div>\n        </div>\n    )\n}\n\nexport default Decoded\n"]},"metadata":{},"sourceType":"module"}