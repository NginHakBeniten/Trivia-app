{"ast":null,"code":"var _jsxFileName = \"/Users/musubiappleidgmail.com/Desktop/Projects/Quiz-trial/src/Components/Question.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Decoded from './Decoded';\n\nconst decodeHTML = function (html) {\n  const txt = document.createElement('textarea');\n  txt.innerHTML = html;\n  return txt.value;\n};\n\nfunction Question() {\n  const [questions, setQuestions] = useState([]);\n  const [answerSelected, setAnswerSelected] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [x, setX] = useState();\n  const [options, setOptions] = useState([]); // console.log('selectedAns', selectedAnswer);\n\n  const score = useSelector(state => state.score);\n  const encodedQuestions = useSelector(state => state.questions); // console.log(encodedQuestions);\n\n  useEffect(() => {\n    const decodedQuestions = encodedQuestions.map(q => {\n      return { ...q,\n        question: decodeHTML(q.question),\n        correct_answer: decodeHTML(q.correct_answer),\n        incorrect_answers: q.incorrect_answers.map(a => decodeHTML(a))\n      };\n    }); // console.log(decodedQuestions)\n\n    setQuestions(decodedQuestions);\n  }, [encodedQuestions]);\n  const questionIndex = useSelector(state => state.index);\n  const dispatch = useDispatch();\n  const question = questions[questionIndex];\n  const answer = question && question.correct_answer;\n\n  const getRandomInt = max => {\n    return Math.floor(Math.random() * Math.floor(max));\n  };\n\n  useEffect(() => {\n    if (!question) {\n      return;\n    }\n\n    let answers = [...question.incorrect_answers];\n    answers.splice(getRandomInt(question.incorrect_answers.length), 0, question.correct_answer);\n    setOptions(answers);\n  }, [question]);\n\n  const handleListItemClick = event => {\n    setAnswerSelected(true);\n    setSelectedAnswer(event.target.textContent);\n    x = event.target.textContent;\n    c;\n\n    if (event.target.textContent === answer) {\n      dispatch({\n        type: 'SET_SCORE',\n        score: score + 1\n      });\n    }\n\n    if (questionIndex + 1 <= questions.length) {\n      setTimeout(() => {\n        setAnswerSelected(false);\n        setSelectedAnswer(null);\n        dispatch({\n          type: 'SET_INDEX',\n          index: questionIndex + 1\n        });\n      }, 250);\n    }\n  }; // console.log(score)\n  // const getClass = option => {\n  //   if (!answerSelected) {\n  //     return ``;\n  //   }\n  //   if (option === answer) {\n  //     return `correct`\n  //   }\n  //   if (option === selectedAnswer) {\n  //     return `selected`\n  //   }\n  // }\n\n\n  if (!question) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 12\n      }\n    }, \"Loading\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, \"Question \", questionIndex), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, question.question), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, options.map((option, i) => /*#__PURE__*/React.createElement(\"li\", {\n    key: i,\n    onClick: handleListItemClick\n    /* className={getClass(option)} */\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, option))));\n}\n\nexport default Question;","map":{"version":3,"sources":["/Users/musubiappleidgmail.com/Desktop/Projects/Quiz-trial/src/Components/Question.js"],"names":["React","useState","useEffect","useSelector","useDispatch","Decoded","decodeHTML","html","txt","document","createElement","innerHTML","value","Question","questions","setQuestions","answerSelected","setAnswerSelected","selectedAnswer","setSelectedAnswer","x","setX","options","setOptions","score","state","encodedQuestions","decodedQuestions","map","q","question","correct_answer","incorrect_answers","a","questionIndex","index","dispatch","answer","getRandomInt","max","Math","floor","random","answers","splice","length","handleListItemClick","event","target","textContent","c","type","setTimeout","option","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Decoded from './Decoded'\n\nconst decodeHTML = function (html) {\n  const txt = document.createElement('textarea')\n  txt.innerHTML = html\n  return txt.value\n}\n\nfunction Question() {\n  const [questions, setQuestions] = useState([])\n  const [answerSelected, setAnswerSelected] = useState(false)\n  const [selectedAnswer, setSelectedAnswer] = useState(null)\n  const [x, setX] = useState()\n  const [options, setOptions] = useState([])\n\n \n  // console.log('selectedAns', selectedAnswer);\n\n  const score = useSelector((state) => state.score)\n  const encodedQuestions = useSelector((state) => state.questions)\n\n  // console.log(encodedQuestions);\n\n  useEffect(() => {\n    const decodedQuestions = encodedQuestions.map(q => {\n      return {\n        ...q,\n        question: decodeHTML(q.question),\n        correct_answer: decodeHTML(q.correct_answer),\n        incorrect_answers: q.incorrect_answers.map(a => decodeHTML(a))\n      }\n    })\n// console.log(decodedQuestions)\n    setQuestions(decodedQuestions)\n  }, [encodedQuestions])\n  const questionIndex = useSelector((state) => state.index)\n \n\n  const dispatch = useDispatch()\n\n  const question = questions[questionIndex]\n  const answer = question && question.correct_answer\n \n  const getRandomInt = (max) => {\n    return Math.floor(Math.random() * Math.floor(max))\n  }\n\n  useEffect(() => {\n    if (!question) {\n      return;\n    }\n    let answers = [...question.incorrect_answers]\n    answers.splice(getRandomInt(question.incorrect_answers.length), 0, question.correct_answer)\n\n\n\n    setOptions(answers)\n  }, [question]) \n\n  const handleListItemClick = (event) => {\n    setAnswerSelected(true)\n    setSelectedAnswer(event.target.textContent)\nx= event.target.textContent\nc\n\n    if (event.target.textContent === answer) {\n      dispatch({\n        type: 'SET_SCORE',\n        score: score + 1,\n      })\n    }\n\n\n    if (questionIndex + 1 <= questions.length) {\n      setTimeout(() => {\n        setAnswerSelected(false)\n        setSelectedAnswer(null)\n\n        dispatch({\n          type: 'SET_INDEX',\n          index: questionIndex +1,\n        \n        })\n      }, 250)\n    }\n  }\n// console.log(score)\n\n\n  // const getClass = option => {\n  //   if (!answerSelected) {\n  //     return ``;\n  //   }\n\n  //   if (option === answer) {\n  //     return `correct`\n  //   }\n\n  //   if (option === selectedAnswer) {\n  //     return `selected`\n  //   }\n  // }\n  if (!question) {\n    return <div>Loading</div>\n  }\n\n  return (\n    <div>\n      <p>Question {questionIndex}</p>       \n      {/* indexchange */}\n      <h3>{question.question}</h3>\n      <ul>\n        {options.map((option, i) => (\n          <li key={i} onClick={handleListItemClick} /* className={getClass(option)} */>\n            {option}\n          </li>\n        ))}\n      </ul>\n     {/* <Decoded handleListItemClick={x}/> */}\n    </div>\n  )\n}\nexport default Question\n"]},"metadata":{},"sourceType":"module"}